package bq;
import bq.def.*;
import bq.impl.log_invoker;

/*!
 * Generated Wrapper For demo_category_log
 *
 * This is a category_log that supports attaching a category to each log entry.
 * Categories can be used to filter logs within the appender settings.
 *
 *    Usage: 
 *    bq.demo_category_log my_category_log = bq.demo_category_log::create_log(log_name, log_config);  //create a demo_category_log object with config.
 *    my_category_log.info("content");  //this is for empty category
 *  my_category_log.info(my_category_log.cat.moduleA.classB, "content"); //this is a log entry for category ModuleA.ClassB, which was generated by your Category Config File
 */

public class demo_category_log extends category_log{
    private demo_category_log()
    {
        super();
    }
    
    private demo_category_log(log child_inst)
    {
        super(child_inst);
    }
    
    /**
     * Create a log object
     * @param name 
     *             If the log name is an empty string, bqLog will automatically assign you a unique name. 
     *             If the log name already exists, it will return the previously existing log object and overwrite the previous configuration with the new config.
     * @param config
     *             log config string
     * @return
     *             A log object, if create failed, the is_valid() method of it will return false
     */
    public static demo_category_log create_log(String name, String config)
    {
        if (config == null || config.length() == 0)
        {
            return new demo_category_log();
        }
        long log_handle = log_invoker.__api_create_log(name, config, demo_category_log.categories_count, demo_category_log.category_names);
        log result = get_log_by_id(log_handle);
        return new demo_category_log(result);
    }
    
    /**
     * Get a log object by it's name
     * @param log_name
     *             Name of the log you want to find
     * @return
     *             A log object, if the log object with specific name was not found, the is_valid() method of it will return false
     */
    public static demo_category_log get_log_by_name(String log_name)
    {
        demo_category_log result = new demo_category_log(log.get_log_by_name(log_name));
        if(!result.is_valid())
        {
            return result;
        }
        //check categories
        if (result.get_categories_count() != demo_category_log.categories_count)
        {
            return new demo_category_log();
        }
        for (long i = 0; i < result.get_categories_count(); ++i)
        {
            if (!demo_category_log.category_names[(int)i].equals(result.get_categories_name_array().get((int)i)))
            {
                return new demo_category_log();
            }
        }
        return result;
    }
    

    ///Core log functions with category param, there are 6 log levels:
    ///verbose, debug, info, warning, error, fatal
    public boolean verbose(demo_category_log_category_base cat, String log_format_content, Object... args)
    {
        return do_log(cat, log_level.verbose, log_format_content, args);
    }
    public boolean debug(demo_category_log_category_base cat, String log_format_content, Object... args)
    {
        return do_log(cat, log_level.debug, log_format_content, args);
    }
    public boolean info(demo_category_log_category_base cat, String log_format_content, Object... args)
    {
        return do_log(cat, log_level.info, log_format_content, args);
    }
    public boolean warning(demo_category_log_category_base cat, String log_format_content, Object... args)
    {
        return do_log(cat, log_level.warning, log_format_content, args);
    }
    public boolean error(demo_category_log_category_base cat, String log_format_content, Object... args)
    {
        return do_log(cat, log_level.error, log_format_content, args);
    }
    public boolean fatal(demo_category_log_category_base cat, String log_format_content, Object... args)
    {
        return do_log(cat, log_level.fatal, log_format_content, args);
    }
    
    
    
    
    /****************************************************************************************************************/
    /**                                 Code Generated By Categories                                              ***/
    /****************************************************************************************************************/
    private static final String[] category_names = {
                                                       ""
                                                       , "node_2"
                                                       , "node_2.node_5"
                                                       , "node_3"
                                                       , "node_3.node_6"
                                                       , "node_3.node_10"
                                                       , "node_4"
                                                       , "node_4.node_7"
                                                       , "node_4.node_7.node_8"
                                                       , "node_4.node_7.node_9"
                                                   };
    private static final long categories_count = (long)category_names.length;
    private static class demo_category_log_category_base extends log_category_base
    {
    }
    public class demo_category_log_category_root
    {
        public static class demo_category_log_node_2 extends demo_category_log_category_base
        {
            public demo_category_log_node_2(){index = 1L;}
            public static class demo_category_log_node_5 extends demo_category_log_category_base
            {
                public demo_category_log_node_5(){index = 2L;}
            }
            public demo_category_log_node_5 node_5 = new demo_category_log_node_5(); 	//node_2.node_5
        }
        public demo_category_log_node_2 node_2 = new demo_category_log_node_2(); 	//node_2
        public static class demo_category_log_node_3 extends demo_category_log_category_base
        {
            public demo_category_log_node_3(){index = 3L;}
            public static class demo_category_log_node_6 extends demo_category_log_category_base
            {
                public demo_category_log_node_6(){index = 4L;}
            }
            public demo_category_log_node_6 node_6 = new demo_category_log_node_6(); 	//node_3.node_6	//comment Test
            public static class demo_category_log_node_10 extends demo_category_log_category_base
            {
                public demo_category_log_node_10(){index = 5L;}
            }
            public demo_category_log_node_10 node_10 = new demo_category_log_node_10(); 	//node_3.node_10
        }
        public demo_category_log_node_3 node_3 = new demo_category_log_node_3(); 	//node_3
        public static class demo_category_log_node_4 extends demo_category_log_category_base
        {
            public demo_category_log_node_4(){index = 6L;}
            public static class demo_category_log_node_7 extends demo_category_log_category_base
            {
                public demo_category_log_node_7(){index = 7L;}
                public static class demo_category_log_node_8 extends demo_category_log_category_base
                {
                    public demo_category_log_node_8(){index = 8L;}
                }
                public demo_category_log_node_8 node_8 = new demo_category_log_node_8(); 	//node_4.node_7.node_8
                public static class demo_category_log_node_9 extends demo_category_log_category_base
                {
                    public demo_category_log_node_9(){index = 9L;}
                }
                public demo_category_log_node_9 node_9 = new demo_category_log_node_9(); 	//node_4.node_7.node_9
            }
            public demo_category_log_node_7 node_7 = new demo_category_log_node_7(); 	//node_4.node_7
        }
        public demo_category_log_node_4 node_4 = new demo_category_log_node_4(); 	//node_4
    }

    
    public final demo_category_log_category_root cat = new demo_category_log_category_root();
}
